(ns arcaneflare.db.migration
  (:require
   [clojure.edn :as edn]
   [clojure.tools.logging :as log]
   [clojure.java.io :as io]
   [arcaneflare.db.common :as dbc]
   [arcaneflare.util :as util]))

(defn files []
  (let [objects (io/file "./resources/migrations")]
    (for [fl (.listFiles objects)]
      (.getName fl))))

(comment
  (files)
  :=> '("0001_create-key-nations.edn"
        "0002_create-key-us-states.edn"
        "0003_create-complete-nj-counties.edn"
        "0004_create-nj-bergen-key-cities.edn"
        "0005_create-harem-cabaret-address.edn"))

(def migrations
  [[1 "create-key-nations" #uuid "75fe4bcc-8bd0-4f56-9ba3-5eedcfeffb29"]
   [2 "create-key-us-states" #uuid "5f1e2cc1-c4b2-4f05-a6f4-ab8f50526c3e"]
   [3 "create-complete-nj-counties" #uuid "b55cf4a0-7eb6-4c6b-9f77-7e5371f9d741"]
   [4 "create-nj-bergen-key-cities" #uuid "fae584a5-b4ad-49a3-ab34-184c2c42e12e"]
   [5 "create-harem-cabaret-address" #uuid "2d904a2e-04c0-48f5-a8f2-b736a17022fa"]])

(defn ->filepath [n label]
  (let [digit-count (-> n str count)
        zeroes (apply str (repeat (- 4 digit-count) "0"))
        num-part (str zeroes n)]
    (str "migrations/" num-part "_" label ".edn")))

(defn get-latest-mig-num []
  (let [read (dbc/query
              '{:find [?n]
                :where [[?migration :migration/number ?n]]
                :order-by [[?n :desc]]
                :limit 1})]
    (or (ffirst read) 0)))

(comment
  (get-latest-mig-num)
  :=> 2)

(defn create-migration-record
  [[n label id]]
  (let [m {:xt/id id
           :migration/id id
           :migration/number n
           :migration/label label
           :migration/at (util/now)}]
    (dbc/put! m)))

(defn run-migration-data
  [[n label _]]
  (let [filepath (->filepath n label)
        coll (-> filepath
                 io/resource
                 slurp
                 edn/read-string)]
    (doseq [item coll]
      (dbc/upsert! item))))

(defn migrate! []
  (let [latest-n (get-latest-mig-num)]
    (doseq [mg migrations]
      (when (< latest-n (first mg))
        (run-migration-data mg)
        (create-migration-record mg)
        (log/info "system migrated" mg)))))

(comment
  (migrate!))
