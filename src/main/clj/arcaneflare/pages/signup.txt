(ns arcaneflare.pages.signup
  (:require
   [clojure.string :as cstr]
   [malli.core :as m]
   [arcaneflare.db.person :as pdb]
   [arcaneflare.layout :as l]
   [arcaneflare.model :as md]
   [arcaneflare.calc :refer [>s]]
   [arcaneflare.util :as u]))

(defn fail [k]
  (let [msg (-> k name (cstr/replace #"-" " "))]
    [:div [:h3.text-bg-danger msg]]))

(comment
  (fail :abc-def)
  :=> [:div [:h3.text-bg-danger "abc def"]])

(def back
  [:a {:href "/signup"}
   "Go back to sign up"])

(defn success []
  [:div [:h3.text-bg-primary
         "Sign up successful. You can now log in."]])

(defn result [{:keys [params] :as _req}]
  (let [{:keys [nickname email password
                role agreed?]} params
        msgs (hash-set
              (when (pdb/nickname-existent? nickname)
                :nickname-already-exists)
              (when (pdb/email-existent? email)
                :email-already-exists)
              (when (not= "on" agreed?)
                :term-is-not-agreed)
              (when (not (m/validate md/nickname nickname))
                :nickname-is-not-in-format)
              (when (not (m/validate md/email email))
                :email-is-not-in-format))
        errors (remove nil? msgs)
        tags (if (empty? errors)
               (if (:xtdb.api/tx-id
                    (pdb/create! {:person/id (u/uuid)
                                  :person/nickname nickname
                                  :person/email email
                                  :person/password password
                                  :person/role (keyword role)
                                  :person/agreed? (= "on" agreed?)}))
                 (success)
                 (fail :error-recording-in-db))
               (into [:div back] (map fail errors)))]
    (l/page {} tags)))

(defn input [k]
  (let [target (str (name k) "check-result")
        label (-> k name cstr/capitalize)
        checker {:hx-post (str "/signup/check-" (name k))
                 :hx-trigger (>s :input :changed)
                 :hx-indicator :.htmx-indicator
                 :hx-target (str "#" target)}]
    [:div.row.mb-3
     [:label.col-sm-3.col-form-label.mb-1.mb-sm-0
      {:for k} label]
     [:div.col-sm-9
      [:input.form-control
       (merge {:name k :type k :id k
               :required true
               :placeholder label}
              checker)]
      [:div {:id target}]]]))

(defn role [k]
  [:div.form-check
   [:input.form-check-input
    {:name :role :type :radio
     :required true :value k}]
   [:label.form-check-label
    (-> k name cstr/capitalize)]])

(def agreement
  [:div.row.mb-3
   [:div.col-sm-9.ms-auto
    [:div.form-check
     [:input.form-check-input
      {:type :checkbox 
       :required true
       :value false
       :name :agreed?}]
     [:label.form-check-label
      {:for "agree-to-terms-2"}
      "I agree to the"
      [:a {:href "#"}
       "Terms &amp; Conditions"]]]]])

(def control
  [:div.text-end
   [:a.btn.btn-secondary
    {:href "#"} "Cancel"]
   [:button.btn.btn-primary
    {:type :submit} "Sign up"]])

(def have-account
  [:div.text-center.text-body-secondary
   "Already have account?"
   [:a {:href "/login"} "Log In"]])

(defn form []
  [:form {:action "/signup/result"
          :method "POST"}
   (input :nickname) (input :email) (input :password)
   [:fieldset.row.mb-3
    [:legend.col-form-label.mb-1.mb-sm-0.col-sm-3.pt-0
     "Role"]
    [:div.col-sm-9
     (role :customer) (role :dancer) (role :staff)]]
   agreement control have-account])

(defn page [_]
  (l/page
   {:nav {:selection nil}}
   [:div.container-md.px-3.px-sm-4.px-xl-5
    [:div.d-flex.justify-content-center
     (form)]]))

(defn check-nickname [{:keys [params]}]
  (let [{:keys [nickname]} params
        avail? (not (pdb/nickname-existent? nickname))
        valid? (m/validate md/nickname nickname)
        msg (cond
              (and avail? valid?)
               [:p.text-primary
               "This nickname is available to use."]
              (and (not avail?) valid?)
              [:p.text-danger
               "This nickname has already been taken."]
              :else
              [:p.text-danger
               "A nickname cannot have a space or special charaters."])]
    (l/elem [:div msg])))

(defn check-email [{:keys [params]}]
  (let [{:keys [email]} params
        unavailable? (pdb/email-existent? email)
        invalid? (not (m/validate md/email email))
        msg (cond
              unavailable?
              [:p.text-danger "This email has already been taken."]
              invalid?
              [:p.text-danger "Must be in valid email format."]
              :else
              [:p.text-primary "This email is available to use."])]
    (l/elem [:div msg])))

(defn check-password [{:keys [params]}]
  (let [{:keys [password]} params
        valid? (m/validate md/password password)
        msg (if valid?
              [:p.text-primary
               "Password looks good."]
              [:div
               [:p.text-danger "Password must contain one digit from 1 to 9,"]
               [:p.text-danger "one lowercase letter,"]
               [:p.text-danger "one uppercase letter,"]
               [:p.text-danger "one special character, no space,"]
               [:p.text-danger "and it must be 8-16 characters long."]])]
    (l/elem [:div msg])))

(def routes
  ["/signup"
   ["" {:get page}]
   ["/check-nickname" {:post check-nickname}]
   ["/check-email" {:post check-email}]
   ["/check-password" {:post check-password}]
   ["/result" {:post result}]])
