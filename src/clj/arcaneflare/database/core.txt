(ns arcaneflare.db.core
  (:require
   [next.jdbc.date-time]
   [next.jdbc.prepare]
   [next.jdbc.result-set]
   [clojure.java.io :as io]
   [clojure.tools.logging :as log]
   [arcaneflare.config :as config]
   [arcaneflare.model]
   [mount.core :refer [defstate]]
   [xtdb.api :as xt]))

(declare db)

(defstate ^:dynamic db
  :start
  (let [host (:db-host config/env)
        dbname (:db-name config/env)
        user (:db-user config/env)
        password (:db-password config/env)
        db-spec {:host host :dbname dbname
                 :user user :password password}
        node (if-not (or host dbname user password) {}
               {:xtdb.jdbc/connection-pool
                {:dialect {:xtdb/module 'xtdb.jdbc.psql/->dialect}
                 :db-spec db-spec}
                :xtdb/tx-log
                {:xtdb/module 'xtdb.jdbc/->tx-log
                 :connection-pool :xtdb.jdbc/connection-pool}
                :xtdb/document-store
                {:xtdb/module 'xtdb.jdbc/->document-store
                 :connection-pool :xtdb.jdbc/connection-pool}
                :xtdb/index-store
                {:kv-store {:xtdb/module 'xtdb.rocksdb/->kv-store
                            :db-dir (io/file "/tmp/rocksdb")}}})]
    (if node
      (do (log/info "DB configs are successfully loaded.")
          (xt/start-node {}))
      (do (log/warn "database connection URL was not found")
          db)))
  :stop
  (.close db))
